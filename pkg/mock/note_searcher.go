// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ztimes2/jazzba/pkg/search (interfaces: NoteSearcher)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	search "github.com/ztimes2/jazzba/pkg/search"
	reflect "reflect"
)

// NoteSearcher is a mock of NoteSearcher interface
type NoteSearcher struct {
	ctrl     *gomock.Controller
	recorder *NoteSearcherMockRecorder
}

// NoteSearcherMockRecorder is the mock recorder for NoteSearcher
type NoteSearcherMockRecorder struct {
	mock *NoteSearcher
}

// NewNoteSearcher creates a new mock instance
func NewNoteSearcher(ctrl *gomock.Controller) *NoteSearcher {
	mock := &NoteSearcher{ctrl: ctrl}
	mock.recorder = &NoteSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *NoteSearcher) EXPECT() *NoteSearcherMockRecorder {
	return m.recorder
}

// SearchByQuery mocks base method
func (m *NoteSearcher) SearchByQuery(arg0 string, arg1, arg2 int) ([]search.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].([]search.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByQuery indicates an expected call of SearchByQuery
func (mr *NoteSearcherMockRecorder) SearchByQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByQuery", reflect.TypeOf((*NoteSearcher)(nil).SearchByQuery), arg0, arg1, arg2)
}
