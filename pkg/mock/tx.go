// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ztimes2/jazzba/pkg/storage (interfaces: Tx)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Tx is a mock of Tx interface
type Tx struct {
	ctrl     *gomock.Controller
	recorder *TxMockRecorder
}

// TxMockRecorder is the mock recorder for Tx
type TxMockRecorder struct {
	mock *Tx
}

// NewTx creates a new mock instance
func NewTx(ctrl *gomock.Controller) *Tx {
	mock := &Tx{ctrl: ctrl}
	mock.recorder = &TxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Tx) EXPECT() *TxMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *Tx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *TxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*Tx)(nil).Commit))
}

// Rollback mocks base method
func (m *Tx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *TxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*Tx)(nil).Rollback))
}
