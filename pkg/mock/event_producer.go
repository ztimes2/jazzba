// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ztimes2/jazzba/pkg/eventdriven (interfaces: Producer)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	eventdriven "github.com/ztimes2/jazzba/pkg/eventdriven"
	reflect "reflect"
)

// EventProducer is a mock of Producer interface
type EventProducer struct {
	ctrl     *gomock.Controller
	recorder *EventProducerMockRecorder
}

// EventProducerMockRecorder is the mock recorder for EventProducer
type EventProducerMockRecorder struct {
	mock *EventProducer
}

// NewEventProducer creates a new mock instance
func NewEventProducer(ctrl *gomock.Controller) *EventProducer {
	mock := &EventProducer{ctrl: ctrl}
	mock.recorder = &EventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *EventProducer) EXPECT() *EventProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method
func (m *EventProducer) Produce(arg0 eventdriven.EventType, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce
func (mr *EventProducerMockRecorder) Produce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*EventProducer)(nil).Produce), arg0, arg1)
}
