// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ztimes2/jazzba/pkg/storage (interfaces: NotebookStore)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/ztimes2/jazzba/pkg/storage"
	reflect "reflect"
)

// NotebookStore is a mock of NotebookStore interface
type NotebookStore struct {
	ctrl     *gomock.Controller
	recorder *NotebookStoreMockRecorder
}

// NotebookStoreMockRecorder is the mock recorder for NotebookStore
type NotebookStoreMockRecorder struct {
	mock *NotebookStore
}

// NewNotebookStore creates a new mock instance
func NewNotebookStore(ctrl *gomock.Controller) *NotebookStore {
	mock := &NotebookStore{ctrl: ctrl}
	mock.recorder = &NotebookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *NotebookStore) EXPECT() *NotebookStoreMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *NotebookStore) BeginTx() (storage.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *NotebookStoreMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*NotebookStore)(nil).BeginTx))
}

// CreateOne mocks base method
func (m *NotebookStore) CreateOne(arg0 storage.Tx, arg1 string) (*storage.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", arg0, arg1)
	ret0, _ := ret[0].(*storage.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne
func (mr *NotebookStoreMockRecorder) CreateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*NotebookStore)(nil).CreateOne), arg0, arg1)
}

// DeleteOne mocks base method
func (m *NotebookStore) DeleteOne(arg0 storage.Tx, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *NotebookStoreMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*NotebookStore)(nil).DeleteOne), arg0, arg1)
}

// FetchAllPaginated mocks base method
func (m *NotebookStore) FetchAllPaginated(arg0, arg1 int) ([]storage.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllPaginated", arg0, arg1)
	ret0, _ := ret[0].([]storage.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllPaginated indicates an expected call of FetchAllPaginated
func (mr *NotebookStoreMockRecorder) FetchAllPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllPaginated", reflect.TypeOf((*NotebookStore)(nil).FetchAllPaginated), arg0, arg1)
}

// FetchOne mocks base method
func (m *NotebookStore) FetchOne(arg0 int) (*storage.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOne", arg0)
	ret0, _ := ret[0].(*storage.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOne indicates an expected call of FetchOne
func (mr *NotebookStoreMockRecorder) FetchOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOne", reflect.TypeOf((*NotebookStore)(nil).FetchOne), arg0)
}

// UpdateOne mocks base method
func (m *NotebookStore) UpdateOne(arg0 storage.UpdateNotebookParameters) (*storage.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0)
	ret0, _ := ret[0].(*storage.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *NotebookStoreMockRecorder) UpdateOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*NotebookStore)(nil).UpdateOne), arg0)
}
