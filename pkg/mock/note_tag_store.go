// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ztimes2/jazzba/pkg/storage (interfaces: NoteTagStore)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/ztimes2/jazzba/pkg/storage"
	reflect "reflect"
)

// NoteTagStore is a mock of NoteTagStore interface
type NoteTagStore struct {
	ctrl     *gomock.Controller
	recorder *NoteTagStoreMockRecorder
}

// NoteTagStoreMockRecorder is the mock recorder for NoteTagStore
type NoteTagStoreMockRecorder struct {
	mock *NoteTagStore
}

// NewNoteTagStore creates a new mock instance
func NewNoteTagStore(ctrl *gomock.Controller) *NoteTagStore {
	mock := &NoteTagStore{ctrl: ctrl}
	mock.recorder = &NoteTagStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *NoteTagStore) EXPECT() *NoteTagStoreMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *NoteTagStore) BeginTx() (storage.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *NoteTagStoreMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*NoteTagStore)(nil).BeginTx))
}

// CreateOne mocks base method
func (m *NoteTagStore) CreateOne(arg0 storage.CreateNoteTagParameters) (*storage.NoteTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", arg0)
	ret0, _ := ret[0].(*storage.NoteTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne
func (mr *NoteTagStoreMockRecorder) CreateOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*NoteTagStore)(nil).CreateOne), arg0)
}

// DeleteOne mocks base method
func (m *NoteTagStore) DeleteOne(arg0 storage.DeleteNoteTagParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *NoteTagStoreMockRecorder) DeleteOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*NoteTagStore)(nil).DeleteOne), arg0)
}

// FetchManyByNote mocks base method
func (m *NoteTagStore) FetchManyByNote(arg0 int) ([]storage.NoteTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchManyByNote", arg0)
	ret0, _ := ret[0].([]storage.NoteTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchManyByNote indicates an expected call of FetchManyByNote
func (mr *NoteTagStoreMockRecorder) FetchManyByNote(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchManyByNote", reflect.TypeOf((*NoteTagStore)(nil).FetchManyByNote), arg0)
}

// FetchManyByNotePaginated mocks base method
func (m *NoteTagStore) FetchManyByNotePaginated(arg0, arg1, arg2 int) ([]storage.NoteTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchManyByNotePaginated", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.NoteTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchManyByNotePaginated indicates an expected call of FetchManyByNotePaginated
func (mr *NoteTagStoreMockRecorder) FetchManyByNotePaginated(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchManyByNotePaginated", reflect.TypeOf((*NoteTagStore)(nil).FetchManyByNotePaginated), arg0, arg1, arg2)
}

// FetchManyByNotes mocks base method
func (m *NoteTagStore) FetchManyByNotes(arg0 []int) (storage.NoteTagsMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchManyByNotes", arg0)
	ret0, _ := ret[0].(storage.NoteTagsMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchManyByNotes indicates an expected call of FetchManyByNotes
func (mr *NoteTagStoreMockRecorder) FetchManyByNotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchManyByNotes", reflect.TypeOf((*NoteTagStore)(nil).FetchManyByNotes), arg0)
}
